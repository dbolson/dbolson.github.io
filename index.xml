<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rubber Duck Dialogs</title><link>https://dbolson.github.io/</link><description>Recent content on Rubber Duck Dialogs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 07 Mar 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://dbolson.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Book Review - The DevOps Handbook</title><link>https://dbolson.github.io/posts/2017-03-07-book-review-the-devops-handbook/</link><pubDate>Tue, 07 Mar 2017 00:00:00 +0000</pubDate><guid>https://dbolson.github.io/posts/2017-03-07-book-review-the-devops-handbook/</guid><description>(Note that all references refer to the Kindle version)
What it isn&amp;rsquo;t: Devops isn&amp;rsquo;t continuous deployment or monitoring or an automated development environment.
What it is: Devops is empowerment of a team of individuals through greater communication.
That&amp;rsquo;s the premise behind The DevOps Handbook by the authors of The Phoenix Project and Continuous Delivery. We learn to optimize for productivity in the long-term and use that lens to build software. This encourages incorporating feedback into the entire software &amp;ndash; and developer &amp;ndash; stack.</description></item><item><title>Introducing MetalDetectr</title><link>https://dbolson.github.io/posts/2011-05-14-introducing-metaldetectr/</link><pubDate>Sat, 14 May 2011 00:00:00 +0000</pubDate><guid>https://dbolson.github.io/posts/2011-05-14-introducing-metaldetectr/</guid><description>It came from a blog post. In July 2010, Cosmo Lee, creator of the metal blog Invisible Oranges requested &amp;ldquo;a simple list&amp;rdquo; of upcoming releases from metal-archives.com. I thought that this would be the perfect opportunity to:
Create something of value for a community I belong to Help someone I genuinely appreciated for his hard work within the same community Create a Rails 3 application and use some new technologies Show off a little code on Github Have fun!</description></item><item><title>Messing With Magic Encoding</title><link>https://dbolson.github.io/posts/2011-05-10-messing-with-magic-encoding/</link><pubDate>Tue, 10 May 2011 00:00:00 +0000</pubDate><guid>https://dbolson.github.io/posts/2011-05-10-messing-with-magic-encoding/</guid><description>There&amp;rsquo;s some irony in how difficult Ruby can be with different character sets considering it was written by someone who doesn&amp;rsquo;t speak English natively. I don&amp;rsquo;t want to get political here, so I&amp;rsquo;m just going to mention some encoding strangeness.
Ruby 1.9 is much improved over Ruby 1.8, but I don&amp;rsquo;t know that defaulting to US-ASCII encoding is a good one. I suppose so, if one wishes to be more explicit with some sort of default.</description></item><item><title>I Am Become Genius</title><link>https://dbolson.github.io/posts/2011-05-02-i-am-become-genius/</link><pubDate>Mon, 02 May 2011 00:00:00 +0000</pubDate><guid>https://dbolson.github.io/posts/2011-05-02-i-am-become-genius/</guid><description>As follow-up to my previous post, I would like to share an article that&amp;rsquo;s made the rounds on the internet recently. &amp;ldquo;How to get to Genius,&amp;rdquo; an excellent synthesis of key ideas for success, correlates with themes from Pragmatic Thinking and Learning.
The working definition for &amp;ldquo;genius&amp;rdquo; is &amp;ldquo;the extreme form of insight&amp;hellip;in terms of perspective,&amp;rdquo; or similarly, the intuition an expert has gained from many years of deliberate study (Malcolm Gladwell&amp;rsquo;s 10,000 hour rule).</description></item><item><title>Book Review - Pragmatic Thinking and Learning: Refactor Your Wetware</title><link>https://dbolson.github.io/posts/2011-04-26-book-review-pragmatic-thinking-and-learning-refactor-your-wetware/</link><pubDate>Tue, 26 Apr 2011 00:00:00 +0000</pubDate><guid>https://dbolson.github.io/posts/2011-04-26-book-review-pragmatic-thinking-and-learning-refactor-your-wetware/</guid><description>The Pragmatic Programmers have consistently put out good material for years, and whether their own or other authors&amp;rsquo;, the quality is almost always high. I just finished Pragmatic Thinking and Learning and, reading numerous other reviews, they are all very positive. The community liked it, and that&amp;rsquo;s usually a good sign (we&amp;rsquo;ll see what happens when not everyone is happy).
Important relationships The first major concept introduced, and repeatedly referenced, is that the relationships between objects are more interesting than the objects themselves.</description></item><item><title>Composite Pattern FTW</title><link>https://dbolson.github.io/posts/2011-04-06-composite-pattern-ftw/</link><pubDate>Wed, 06 Apr 2011 00:00:00 +0000</pubDate><guid>https://dbolson.github.io/posts/2011-04-06-composite-pattern-ftw/</guid><description>A post by Paul Graham I recently found resonated with what I&amp;rsquo;ve been doing at work recently. In his post, &amp;ldquo;Taste for Makers,&amp;rdquo; PG posits that beauty is not wholly subjective and that good design is beautiful. Among others, good design:
is simple solves the right problem is suggestive looks easy uses symmetry is redesign can copy is often quite strange happens in chunks I&amp;rsquo;d like to focus on a few of these descriptions and use an example I&amp;rsquo;ve recently done.</description></item></channel></rss>